// <auto-generated />
using System;
using CommunicationLifecycle.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CommunicationLifecycle.Infrastructure.Migrations
{
    [DbContext(typeof(CommunicationDbContext))]
    partial class CommunicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.Communication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("LastUpdatedUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("SourceFileUrl")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("TypeCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CurrentStatus");

                    b.HasIndex("LastUpdatedUtc");

                    b.HasIndex("TypeCode");

                    b.ToTable("Communications");
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.CommunicationStatusHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CommunicationId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("OccurredUtc")
                        .HasColumnType("datetime2");

                    b.Property<string>("StatusCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CommunicationId");

                    b.HasIndex("OccurredUtc");

                    b.HasIndex("StatusCode");

                    b.ToTable("CommunicationStatusHistory");
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.CommunicationType", b =>
                {
                    b.Property<string>("TypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("TypeCode");

                    b.ToTable("CommunicationTypes");

                    b.HasData(
                        new
                        {
                            TypeCode = "EOB",
                            Description = "Explanation of Benefits documents",
                            DisplayName = "Explanation of Benefits",
                            IsActive = true
                        },
                        new
                        {
                            TypeCode = "EOP",
                            Description = "Explanation of Payment documents",
                            DisplayName = "Explanation of Payment",
                            IsActive = true
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            Description = "Member identification cards",
                            DisplayName = "Member ID Card",
                            IsActive = true
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            Description = "New member welcome packets",
                            DisplayName = "Welcome Packet",
                            IsActive = true
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            Description = "Claim statements",
                            DisplayName = "Claim Statement",
                            IsActive = true
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            Description = "Provider statements",
                            DisplayName = "Provider Statement",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.CommunicationTypeStatus", b =>
                {
                    b.Property<string>("TypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("StatusCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.HasKey("TypeCode", "StatusCode");

                    b.ToTable("CommunicationTypeStatuses");

                    b.HasData(
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "ReadyForRelease",
                            Description = "EOB ReadyForRelease status",
                            DisplayOrder = 1
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Released",
                            Description = "EOB Released status",
                            DisplayOrder = 2
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "QueuedForPrinting",
                            Description = "EOB QueuedForPrinting status",
                            DisplayOrder = 3
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Printed",
                            Description = "EOB Printed status",
                            DisplayOrder = 4
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Inserted",
                            Description = "EOB Inserted status",
                            DisplayOrder = 5
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "WarehouseReady",
                            Description = "EOB WarehouseReady status",
                            DisplayOrder = 6
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Shipped",
                            Description = "EOB Shipped status",
                            DisplayOrder = 7
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "InTransit",
                            Description = "EOB InTransit status",
                            DisplayOrder = 8
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Delivered",
                            Description = "EOB Delivered status",
                            DisplayOrder = 9
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Returned",
                            Description = "EOB Returned status",
                            DisplayOrder = 10
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Failed",
                            Description = "EOB Failed status",
                            DisplayOrder = 11
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Cancelled",
                            Description = "EOB Cancelled status",
                            DisplayOrder = 12
                        },
                        new
                        {
                            TypeCode = "EOB",
                            StatusCode = "Archived",
                            Description = "EOB Archived status",
                            DisplayOrder = 13
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "ReadyForRelease",
                            Description = "EOP ReadyForRelease status",
                            DisplayOrder = 1
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Released",
                            Description = "EOP Released status",
                            DisplayOrder = 2
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "QueuedForPrinting",
                            Description = "EOP QueuedForPrinting status",
                            DisplayOrder = 3
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Printed",
                            Description = "EOP Printed status",
                            DisplayOrder = 4
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Inserted",
                            Description = "EOP Inserted status",
                            DisplayOrder = 5
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "WarehouseReady",
                            Description = "EOP WarehouseReady status",
                            DisplayOrder = 6
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Shipped",
                            Description = "EOP Shipped status",
                            DisplayOrder = 7
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "InTransit",
                            Description = "EOP InTransit status",
                            DisplayOrder = 8
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Delivered",
                            Description = "EOP Delivered status",
                            DisplayOrder = 9
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Returned",
                            Description = "EOP Returned status",
                            DisplayOrder = 10
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Failed",
                            Description = "EOP Failed status",
                            DisplayOrder = 11
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Cancelled",
                            Description = "EOP Cancelled status",
                            DisplayOrder = 12
                        },
                        new
                        {
                            TypeCode = "EOP",
                            StatusCode = "Archived",
                            Description = "EOP Archived status",
                            DisplayOrder = 13
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "ReadyForRelease",
                            Description = "ID Card ReadyForRelease status",
                            DisplayOrder = 1
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Released",
                            Description = "ID Card Released status",
                            DisplayOrder = 2
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "QueuedForPrinting",
                            Description = "ID Card QueuedForPrinting status",
                            DisplayOrder = 3
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Printed",
                            Description = "ID Card Printed status",
                            DisplayOrder = 4
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "WarehouseReady",
                            Description = "ID Card WarehouseReady status",
                            DisplayOrder = 5
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Shipped",
                            Description = "ID Card Shipped status",
                            DisplayOrder = 6
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "InTransit",
                            Description = "ID Card InTransit status",
                            DisplayOrder = 7
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Delivered",
                            Description = "ID Card Delivered status",
                            DisplayOrder = 8
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Returned",
                            Description = "ID Card Returned status",
                            DisplayOrder = 9
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Failed",
                            Description = "ID Card Failed status",
                            DisplayOrder = 10
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Cancelled",
                            Description = "ID Card Cancelled status",
                            DisplayOrder = 11
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Expired",
                            Description = "ID Card Expired status",
                            DisplayOrder = 12
                        },
                        new
                        {
                            TypeCode = "ID_CARD",
                            StatusCode = "Archived",
                            Description = "ID Card Archived status",
                            DisplayOrder = 13
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "ReadyForRelease",
                            Description = "WELCOME_PACKET ReadyForRelease status",
                            DisplayOrder = 1
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Released",
                            Description = "WELCOME_PACKET Released status",
                            DisplayOrder = 2
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Printed",
                            Description = "WELCOME_PACKET Printed status",
                            DisplayOrder = 3
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Shipped",
                            Description = "WELCOME_PACKET Shipped status",
                            DisplayOrder = 4
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Delivered",
                            Description = "WELCOME_PACKET Delivered status",
                            DisplayOrder = 5
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Failed",
                            Description = "WELCOME_PACKET Failed status",
                            DisplayOrder = 6
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Cancelled",
                            Description = "WELCOME_PACKET Cancelled status",
                            DisplayOrder = 7
                        },
                        new
                        {
                            TypeCode = "WELCOME_PACKET",
                            StatusCode = "Archived",
                            Description = "WELCOME_PACKET Archived status",
                            DisplayOrder = 8
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "ReadyForRelease",
                            Description = "CLAIM_STATEMENT ReadyForRelease status",
                            DisplayOrder = 1
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Released",
                            Description = "CLAIM_STATEMENT Released status",
                            DisplayOrder = 2
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Printed",
                            Description = "CLAIM_STATEMENT Printed status",
                            DisplayOrder = 3
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Shipped",
                            Description = "CLAIM_STATEMENT Shipped status",
                            DisplayOrder = 4
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Delivered",
                            Description = "CLAIM_STATEMENT Delivered status",
                            DisplayOrder = 5
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Failed",
                            Description = "CLAIM_STATEMENT Failed status",
                            DisplayOrder = 6
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Cancelled",
                            Description = "CLAIM_STATEMENT Cancelled status",
                            DisplayOrder = 7
                        },
                        new
                        {
                            TypeCode = "CLAIM_STATEMENT",
                            StatusCode = "Archived",
                            Description = "CLAIM_STATEMENT Archived status",
                            DisplayOrder = 8
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "ReadyForRelease",
                            Description = "PROVIDER_STATEMENT ReadyForRelease status",
                            DisplayOrder = 1
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Released",
                            Description = "PROVIDER_STATEMENT Released status",
                            DisplayOrder = 2
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Printed",
                            Description = "PROVIDER_STATEMENT Printed status",
                            DisplayOrder = 3
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Shipped",
                            Description = "PROVIDER_STATEMENT Shipped status",
                            DisplayOrder = 4
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Delivered",
                            Description = "PROVIDER_STATEMENT Delivered status",
                            DisplayOrder = 5
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Failed",
                            Description = "PROVIDER_STATEMENT Failed status",
                            DisplayOrder = 6
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Cancelled",
                            Description = "PROVIDER_STATEMENT Cancelled status",
                            DisplayOrder = 7
                        },
                        new
                        {
                            TypeCode = "PROVIDER_STATEMENT",
                            StatusCode = "Archived",
                            Description = "PROVIDER_STATEMENT Archived status",
                            DisplayOrder = 8
                        });
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.CommunicationStatusHistory", b =>
                {
                    b.HasOne("CommunicationLifecycle.Core.Entities.Communication", "Communication")
                        .WithMany("StatusHistory")
                        .HasForeignKey("CommunicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Communication");
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.CommunicationTypeStatus", b =>
                {
                    b.HasOne("CommunicationLifecycle.Core.Entities.CommunicationType", "CommunicationType")
                        .WithMany("TypeStatuses")
                        .HasForeignKey("TypeCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CommunicationType");
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.Communication", b =>
                {
                    b.Navigation("StatusHistory");
                });

            modelBuilder.Entity("CommunicationLifecycle.Core.Entities.CommunicationType", b =>
                {
                    b.Navigation("TypeStatuses");
                });
#pragma warning restore 612, 618
        }
    }
}
