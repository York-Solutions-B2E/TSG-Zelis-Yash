@page "/communications"
@using CommunicationLifecycle.Core.Entities
@using CommunicationLifecycle.Core.Enums
@inject IHttpClientFactory HttpClientFactory
@inject ILogger<Communications> Logger
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Communications - Communication Lifecycle</PageTitle>

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 mb-0">Communications</h1>
                <button class="btn btn-primary" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-circle"></i> Add Communication
                </button>
            </div>

            <!-- Filters -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-3">
                            <label class="form-label">Type</label>
                            <select class="form-select" @bind="selectedTypeCode" @bind:after="OnFilterChanged">
                                <option value="">All Types</option>
                                @foreach (var type in communicationTypes)
                                {
                                    <option value="@type.TypeCode">@type.DisplayName</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Status</label>
                            <select class="form-select" @bind="selectedStatus" @bind:after="OnFilterChanged">
                                <option value="">All Statuses</option>
                                @foreach (var status in availableStatuses)
                                {
                                    <option value="@status.Key">@status.Value</option>
                                }
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label class="form-label">Page Size</label>
                            <select class="form-select" @bind="pageSize" @bind:after="OnPageSizeChanged">
                                <option value="10">10</option>
                                <option value="25">25</option>
                                <option value="50">50</option>
                                <option value="100">100</option>
                            </select>
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                                <i class="bi bi-arrow-clockwise"></i> Clear Filters
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Loading State -->
            @if (loading)
            {
                <div class="text-center py-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2">Loading communications...</p>
                </div>
            }
            else if (communicationResponse != null)
            {
                <!-- Communications Table -->
                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h5 class="mb-0">Communications List</h5>
                        <span class="badge bg-secondary">Total: @communicationResponse.TotalCount</span>
                    </div>
                    <div class="card-body p-0">
                        <div class="table-responsive">
                            <table class="table table-hover mb-0">
                                <thead class="table-light">
                                    <tr>
                                        <th>Title</th>
                                        <th>Type</th>
                                        <th>Current Status</th>
                                        <th>Last Updated</th>
                                        <th>Source File</th>
                                        <th width="150">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @if (communicationResponse.Communications.Any())
                                    {
                                        @foreach (var communication in communicationResponse.Communications)
                                        {
                                            <tr>
                                                <td>
                                                    <strong>@communication.Title</strong>
                                                    @if (!string.IsNullOrEmpty(communication.Description))
                                                    {
                                                        <br />
                                                        <small class="text-muted">@communication.Description</small>
                                                    }
                                                </td>
                                                <td>
                                                    <span class="badge bg-info text-dark">@GetTypeDisplayName(communication.TypeCode)</span>
                                                </td>
                                                <td>
                                                    <span class="badge @GetStatusBadgeClass(communication.CurrentStatus)">
                                                        @communication.CurrentStatus
                                                    </span>
                                                </td>
                                                <td>
                                                    @communication.LastUpdatedUtc.ToString("MMM dd, yyyy HH:mm")
                                                    <br />
                                                    <small class="text-muted">@GetRelativeTime(communication.LastUpdatedUtc)</small>
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(communication.SourceFileUrl))
                                                    {
                                                        <a href="@communication.SourceFileUrl" target="_blank" class="btn btn-sm btn-outline-secondary">
                                                            <i class="bi bi-file-earmark"></i> View
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    <button class="btn btn-sm btn-primary me-1" @onclick="() => ViewDetails(communication.Id)">
                                                        <i class="bi bi-eye"></i> Details
                                                    </button>
                                                </td>
                                            </tr>
                                        }
                                    }
                                    else
                                    {
                                        <tr>
                                            <td colspan="6" class="text-center py-4">
                                                <i class="bi bi-inbox display-4 text-muted"></i>
                                                <p class="text-muted mt-2">No communications found</p>
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Pagination -->
                    @if (communicationResponse.TotalPages > 1)
                    {
                        <div class="card-footer">
                            <nav aria-label="Communications pagination">
                                <ul class="pagination justify-content-center mb-0">
                                    <li class="page-item @(currentPage <= 1 ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage - 1)">Previous</button>
                                    </li>

                                    @for (int i = Math.Max(1, currentPage - 2); i <= Math.Min(communicationResponse.TotalPages, currentPage + 2); i++)
                                    {
                                        <li class="page-item @(i == currentPage ? "active" : "")">
                                            <button class="page-link" @onclick="() => GoToPage(i)">@i</button>
                                        </li>
                                    }

                                    <li class="page-item @(currentPage >= communicationResponse.TotalPages ? "disabled" : "")">
                                        <button class="page-link" @onclick="() => GoToPage(currentPage + 1)">Next</button>
                                    </li>
                                </ul>
                            </nav>
                            <div class="text-center mt-2">
                                <small class="text-muted">
                                    Showing @((currentPage - 1) * pageSize + 1) to @Math.Min(currentPage * pageSize, communicationResponse.TotalCount) 
                                    of @communicationResponse.TotalCount communications
                                </small>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

@code {
    private CommunicationListResponse? communicationResponse;
    private List<CommunicationType> communicationTypes = new();
    private Dictionary<string, string> availableStatuses = new();
    private bool loading = true;
    private int currentPage = 1;
    private int pageSize = 10;
    private string selectedTypeCode = "";
    private string selectedStatus = "";

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
        await LoadCommunicationTypes();
        await LoadAvailableStatuses();
    }

    private async Task LoadData()
    {
        loading = true;
        try
        {
            var query = $"communications?page={currentPage}&pageSize={pageSize}";
            
            if (!string.IsNullOrEmpty(selectedTypeCode))
                query += $"&typeCode={Uri.EscapeDataString(selectedTypeCode)}";
                
            if (!string.IsNullOrEmpty(selectedStatus))
                query += $"&status={Uri.EscapeDataString(selectedStatus)}";

            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            communicationResponse = await httpClient.GetFromJsonAsync<CommunicationListResponse>(query);
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading communications");
        }
        finally
        {
            loading = false;
        }
    }

    private async Task LoadCommunicationTypes()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var types = await httpClient.GetFromJsonAsync<List<CommunicationType>>("communicationtypes?activeOnly=true");
            communicationTypes = types ?? new List<CommunicationType>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading communication types");
        }
    }

    private async Task LoadAvailableStatuses()
    {
        try
        {
            var httpClient = HttpClientFactory.CreateClient("ApiClient");
            var response = await httpClient.GetFromJsonAsync<AvailableStatusesResponse>("communicationtypes/available-statuses");
            if (response?.Statuses != null)
            {
                availableStatuses = response.Statuses.ToDictionary(s => s.Code, s => s.Description);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available statuses");
        }
    }

    private async Task OnFilterChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task OnPageSizeChanged()
    {
        currentPage = 1;
        await LoadData();
    }

    private async Task ClearFilters()
    {
        selectedTypeCode = "";
        selectedStatus = "";
        currentPage = 1;
        await LoadData();
    }

    private async Task GoToPage(int page)
    {
        if (page >= 1 && page <= (communicationResponse?.TotalPages ?? 1))
        {
            currentPage = page;
            await LoadData();
        }
    }

    private void ViewDetails(int communicationId)
    {
        Navigation.NavigateTo($"/communications/{communicationId}");
    }

    private void ShowCreateModal()
    {
        Navigation.NavigateTo("/communications/create");
    }

    private string GetTypeDisplayName(string typeCode)
    {
        var type = communicationTypes.FirstOrDefault(t => t.TypeCode == typeCode);
        return type?.DisplayName ?? typeCode;
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "ReadyForRelease" or "Released" => "bg-primary",
            "QueuedForPrinting" or "Printed" or "Inserted" => "bg-info text-dark",
            "WarehouseReady" or "Shipped" or "InTransit" => "bg-warning text-dark",
            "Delivered" => "bg-success",
            "Failed" or "Cancelled" => "bg-danger",
            "Returned" => "bg-secondary",
            "Expired" or "Archived" => "bg-dark",
            _ => "bg-light text-dark"
        };
    }

    private string GetRelativeTime(DateTime dateTime)
    {
        var diff = DateTime.UtcNow - dateTime;
        return diff.TotalDays >= 1 ? $"{(int)diff.TotalDays} days ago" :
               diff.TotalHours >= 1 ? $"{(int)diff.TotalHours} hours ago" :
               $"{(int)diff.TotalMinutes} minutes ago";
    }

    // DTOs matching the API
    public class CommunicationListResponse
    {
        public List<Communication> Communications { get; set; } = new();
        public int Page { get; set; }
        public int PageSize { get; set; }
        public int TotalCount { get; set; }
        public int TotalPages { get; set; }
    }

    public class AvailableStatusesResponse
    {
        public List<StatusInfo> Statuses { get; set; } = new();
    }

    public class StatusInfo
    {
        public string Code { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
    }
} 